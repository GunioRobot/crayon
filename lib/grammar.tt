grammar Crayon
  rule script
    expression remaining_expressions:(newline expression)* newline <Script>
    {
      def expressions
        [expression] + remaining_expressions.elements.map {|e| e.expression}
      end
    }
  end

  rule expression
    spaced_statements:(space statement)+ space <Expression>
    {
      def statements
        spaced_statements.elements.map {|e| e.statement}
      end
    }
  end

  rule statement
    assignment / if / comparison / call / equation / object / comment
  end

  rule object
    number / string / var / point 
  end

  rule call
    function:var space arglist <Call>
  end

  rule comparison
    object space op:("=" / "!=" / ">" / "<" / ">=" / "<=" / "and" / "or") space expression
  end

  rule if
    "if" space condition:expression space newline
      expressions:(expression space newline)* 
    "end"
  end

  rule arglist
    ":" space arg:assignment remaining_args:(space "," space arg:assignment)* <Arglist> 
    {
      def args
        args = {arg.var => arg.expression}
        remaining_args.elements.each {|e| args.merge!({e.arg.var => e.arg.expression})}
        args
      end
    } /
    ":" space newline 
      arg:assignment
      remaining_args:(space newline arg:assignment)* newline 
    "end" <Arglist> 
    {
      def args
        args = {arg.var => arg.expression}
        remaining_args.elements.each {|e| args.merge!({e.arg.var => e.arg.expression})}
        args
      end
    } /
    ":" space arg:expression <Arglist>
    {
      def args
        {"__default" => arg}
      end
    }
  end

  rule equation
    object space op:[\+\-\/\*] space expression <Equation>
  end

  rule assignment
    var space "<-" !"<-" expression <Assignment>
  end

  rule keyword
    "end" / "times" / "if" / "else" / "while" / "and" / "or"
  end

  rule point
    "(" space x:(number / var) "," space y:(number / var) space ")" <Point>
  end

  rule number
    [0-9]+ <Number>
    {
      def value
        text_value.to_i
      end
    }
  end

  rule var
    !keyword [a-zA-Z_] [\w]* <Variable>
  end

  rule string
    '"' (!'"' . / '\"')* '"' <String>
    {
      def value
        text_value.gsub('"', '')
      end
    }
  end

  rule comment
    '#' (!newline .)+ (newline / !.)
  end

  rule space
    [ \t]*
  end

  rule newline
    space ("\r\n"+ / [\r\n]+) space
  end
end
