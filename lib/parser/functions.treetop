module Crayon
  module Parser

    grammar Functions
      rule call
        function:identifier space arglist <Call> 
      end

      rule inline_call
        function:identifier space inline_arglist <InlineCall>
      end

      rule arglist
        inline_arglist /
        default_arg:(expression space)? "with" newline 
          arg:argument newline
          remaining_args:(argument newline)*
        "end" <Arglist> 
        {
          def args
            args = {arg.identifier => arg.expression}
            args.merge!({"__default" => default_arg.expression}) if defined? default_arg.expression
            remaining_args.elements.each {|e| args.merge!({e.argument.identifier => e.argument.expression})}
            args
          end
        } /
        default_arg:expression space? <Arglist>
        {
          def args
            {"__default" => default_arg}
          end
        }
      end

      rule inline_arglist
        default_arg:(expression space)? "with" space arg:argument remaining_args:(space? "," space? arg:argument)* <Arglist> 
        {
          def args
            args = {arg.identifier => arg.expression}
            args.merge!({"__default" => default_arg.expression}) if defined? default_arg.expression
            remaining_args.elements.each {|e| args.merge!({e.arg.identifier => e.arg.expression})}
            args
          end
        }
      end

      rule argument
        identifier space "as" space expression
      end

      rule function
        "function" space name:identifier space "uses" space arg:identifier remaining_args:(space? "," space? arg:identifier)* newline
          body:(statement newline)*
        "end" <Function>
        {
          def args
            [arg] + remaining_args.elements.map {|e| e.arg}
          end

          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end
    end

  end
end
