module Crayon
  module Parser

    grammar ControlFlow
      rule loop
        "repeat" space "while" space condition:expression newline
          body:(expression newline)*
        "end" <WhileLoop>
        {
          def expressions
            body.elements.map {|e| e.expression}
          end
        } /
        "repeat" space i_end:numeric space "times" counter:(space "with" space var)? newline
          body:(expression newline)*
        "end" <CountLoop>
        {
          def expressions
            body.elements.map {|e| e.expression} 
          end
        } /
        "repeat" space var space "from" space i_start:numeric space "to" space i_end:numeric newline
          body:(expression newline)*
        "end" <CountLoop>
        {
          def expressions
            body.elements.map {|e| e.expression}
          end
        }
      end

      rule conditional
        "if" space condition:expression newline
          body:(expression newline)* 
          elseif*
          else?
        "end" <If>
        {
          def expressions
            body.elements.map {|e| e.expression}
          end
        }
      end

      rule elseif
        "else if" space condition:expression newline
          body:(expression newline)* <ElseIf>
        {
          def expressions
            body.elements.map {|e| e.expression}
          end
        }
      end

      rule else
        "else" newline
          body:(expression newline)* <Else>
        {
          def expresions
            body.elements.map {|e| e.expression}
          end
        }
      end
    end

  end
end
