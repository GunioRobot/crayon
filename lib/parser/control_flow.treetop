module Crayon
  module Parser

    grammar ControlFlow
      rule loop
        "repeat" space "while" space condition:expression newline
          body:(statement newline)*
        "end" <WhileLoop>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        "repeat" space i_end:numeric space "times" counter:(space "with" space varprop)? newline
          body:(statement newline)*
        "end" <CountLoop>
        {
          def statements
            body.elements.map {|s| s.statement} 
          end
        } /
        "repeat" space varprop space "from" space i_start:numeric space "to" space i_end:numeric newline
          body:(statement newline)*
        "end" <CountLoop>
        {
          def statement
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule conditional
        iff / unles
      end

      rule iff
        "if" space condition:expression newline
          body:(statement newline)* 
          elseif:elseif?
          els:else?
        "end" <If>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        expression space "if" space condition:expression <InlineIf> 
      end

      rule elseif
        "else" space "if" space condition:expression newline
          body:(statement newline)* 
         elseif:elseif? <ElseIf>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule else
        "else" newline
          body:(statement newline)* <Else>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule unles
        "unless" space condition:expression newline
          body:(statement newline)*
        "end" <Unless>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        expression space "unless" space condition:expression <InlineUnless> 
      end
    end

  end
end
