require 'parser/nodes'
require 'parser/objects'
require 'parser/lists'
require 'parser/control_flow'
require 'parser/functions'
require 'parser/events'

module Crayon
  module Parser

    grammar Crayon
      include Objects
      include ControlFlow
      include Functions
      include Events
      include Lists

      rule script
        # Comments consume newlines (since a comment is a # followed by any character up to a newline), so consider
        # them as a special case compared to statements
        newline* first_statement:statement remaining_statements:(newline statement)* newline* <Script>
        {
          def statements
            #statement = !(defined? first_statement.statement).nil? ? [first_statement.statement] : []
            statement = [first_statement]
            statement + remaining_statements.elements.map{|s| !(defined? s.statement).nil? ? s.statement : nil}.compact
          end
        }
      end

      rule statement
        comment / assignment / conditional / loop / function / event / call
      end

      rule expression
        object !(space? operator) <Object> / comparison / equation 
      end

      rule object
        varprop / number / string / list / boolean / list_item 
      end

      rule numeric
        varprop / number / equation 
      end

      rule varprop
        var / property
      end

      rule comparison
        object space? compareop space? expression <Comparison>
      end

      rule equation
        object space? mathop space? expression <Equation>
      end

      rule operator
        mathop / compareop
      end

      rule mathop
        [\+\-\/\*] 
      end

      rule compareop
        "=" / "≠" / ">" / "<" / "≥" / "≤" / "and" / "or"
      end

      rule assignment
        "set" space varprop space "to" space expression <Assignment>
      end

      rule keyword
        "set" / "end" / "function" / "repeat" / "with" / "as" / "to" / "on" / "uses" / "times" / "if" / "else" / "while" / "and" / "or" / "true" / "false" / "nothing" / "item" / "of" 
      end

      rule identifier
        # This can be generated the same as a variable if need be
        !keyword [a-zA-Z] [\w]* <Variable>
        {
          def identifier
            text_value
          end
        }
      end

      rule var
        # Checking for "of" eliminates ambiguity between a variable
        # and a property of an object
        identifier !(space "of") <Variable>
      end

      rule comment
        '#' newline / '#' (!newline .)+ (newline / !.) 
      end

      rule space
        [ \t]+
      end

      rule newline
        space? [\r\n]+ space?
      end
    end

  end
end
