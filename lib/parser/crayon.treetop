# Copyright (c) 2010-2011 Sean Voisen.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'parser/nodes'
require 'parser/objects'
require 'parser/lists'
require 'parser/control_flow'
require 'parser/functions'
require 'parser/events'

module Crayon
  module Parser

    grammar Crayon
      include Objects
      include ControlFlow
      include Functions
      include Events
      include Lists

      rule script
        newline* statement remaining_statements:(newline statement)* newline* <Script>
        {
          def statements
            [statement] + remaining_statements.elements.map{|s| s.statement}
          end
        }
      end

      rule statement
        comment / assignment / conditional / loop / function / start_event / stop_event / call 
      end

      rule line_statement
        assignment / start_event / stop_event / inline_call / object
      end

      rule expression
        inline_call / object !(space? operator) <Object> / comparison / equation
      end

      rule object
        varprop / number / string / list / boolean / list_item 
      end

      rule numeric
        varprop / number / equation 
      end

      rule varprop
        var / property
      end

      rule comparison
        object space? !keyword compareop space? expression <Comparison>
      end

      rule equation
        object space? !keyword mathop space? expression <Equation>
      end

      rule operator
        mathop / compareop
      end

      rule mathop
        [\+\-\/\*] 
      end

      rule compareop
        "=" / "≠" / ">" / "<" / "≥" / "≤" / "and" / "or"
      end

      rule assignment
        "set" space varprop space "to" space expression <Assignment>
      end

      rule keyword
        "set" / "end" / "function" / "repeat" / "with" / "as" / "to" / "on" / "uses" / "times" / "if" / "else" / "while" / "and" / "or" / "true" / "false" / "nothing" / "item" / "of" 
      end

      rule identifier
        # This can be generated the same as a variable if need be
        !(keyword (space / newline)) [a-zA-Z] [\w]* "?"? <Variable>
        {
          def identifier
            text_value
          end
        }
      end

      rule var
        # Checking for "of" eliminates ambiguity between a variable
        # and a property of an object
        identifier !(space "of") <Variable>
      end

      rule comment
        '#' (!newline .)* <Comment>
      end

      rule space
        [ \t]+
      end

      rule newline
        space? [\r\n]+ space?
      end
    end

  end
end
