require 'parser/nodes'
require 'parser/object_types'
require 'parser/control_flow'
require 'parser/functions'
require 'parser/events'

module Crayon
  module Parser

    grammar Crayon
      include ObjectTypes
      include ControlFlow
      include Functions
      include Events

      rule script
        newline* expression remaining_expressions:(newline expression)* newline* <Script>
        {
          def expressions
            [expression] + remaining_expressions.elements.map {|e| e.expression}
          end
        }
      end

      rule expression
        assignment / conditional / loop / call / comparison / function / event / equation / object / comment
      end

      rule object
        var / number / string / list / boolean
      end

      rule numeric
        var / number / equation
      end

      rule comparison
        object space? op:("=" / "≠" / ">" / "<" / "≥" / "≤" / "and" / "or") space? expression <Comparison>
      end

      rule equation
        object space? op:[\+\-\/\*] space? expression <Equation>
      end

      rule assignment
        "set" space var space "to" space expression <Assignment>
      end

      rule keyword
        "set" / "end" / "function" / "repeat" / "with" / "as" / "to" / "on" / "uses" / "times" / "if" / "else" / "while" / "and" / "or" / "true" / "false" / "nothing"
      end

      rule var
        !keyword [a-zA-Z] [\w]* <Variable>
      end

      rule comment
        '#' (!newline .)+ (newline / !.)
      end

      rule space
        [ \t]+
      end

      rule newline
        space? [\r\n]+ space?
      end
    end

  end
end
