#!/usr/bin/env ruby

# == Synopsis
#   Compiler for the Crayon programming language.
#
# == Usage
#   crayonc.rb myscript.cyn
#   crayonc.rb -f abs foo.cyn
#   crayonc.rb --format abc bar.cyn
#   
# == Options
#   -h, --help        Displays help message
#   -v, --version     Displays the version
#   -k, --keep-temp   Keep temporary files 
#   -V, --verbose     Verbose output
#
# == Author
#   Sean Voisen
#
# == Copyright
#   Copyright (C) 2010 Sean Voisen. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

require 'rubygems'
require 'optparse'
require 'rdoc/usage'
require 'ostruct'
require 'date'
require 'treetop'

require 'lib/generator'
require 'lib/nodes'

# Use compiled grammar if it exists, otherwise load grammar definition
if File.file?(File.dirname(__FILE__) + "/lib/grammar.rb")
  require 'lib/grammar'
else
  Treetop.load File.dirname(__FILE__) + "/lib/grammar.tt"
end

module Crayon

  class InvalidArgumentError < RuntimeError; end
  class ParserError < RuntimeError; end

  class Compiler
    VERSION = '0.0.1'

    attr_reader :options

    def initialize(arguments, stdin)
      @arguments = arguments
      @stdin = stdin

      # Setup any default options
      @options = OpenStruct.new
      @options.keep_temp = false
      @options.verbose = false
    end

    def run
      begin
        if parsed_options? && arguments_valid?
          puts "Compilation started at #{DateTime.now}\n\n" if @options.verbose

          process_arguments
          process_command

          puts "\n\nCompilation finished at #{DateTime.now}" if @options.verbose
        end
      rescue InvalidArgumentError => e
        puts e
      end
    end

    protected

      def parsed_options?
        opts = OptionParser.new

        opts.on('-v', '--version') do  
          print_version
          exit 0
        end

        opts.on('-h', '--help') do
          print_help
          exit 0
        end

        opts.on('-k', '--keep-temp') do
          @options.keep_temp = true
        end

        opts.on('-V', '--verbose') do 
          @options.verbose = true
        end

        opts.parse!(@arguments) rescue return false

        true
      end

      def arguments_valid?
        unless @arguments.length == 1 
          raise InvalidArgumentException, "No source file specified"
        end
        
        unless File.file? @arguments[0] 
          raise InvalidArgumentException, "Cannot find source file #{@arguments[0]}"
        end

        true
      end

      def process_arguments
        @source = @arguments[0]
      end

      def process_command
        code = IO.read(@source)
        puts compile(code)
      end

      def compile(code)
        generator = Crayon::Generator.new
        parser = CrayonParser.new

        if node = parser.parse(code)
          node.compile(generator)
        else
          raise ParserError, parser.failure_reason
        end
      end

      def print_options
        puts "Options:\n"

        @options.marshal_dump.each do |name, value|
          puts "  #{name} = #{value}"
        end
      end

      def print_help
        print_version
        RDoc::usage() # exits app
      end

      def print_version
        puts "#{File.basename(__FILE__)} #{VERSION}"
      end

      def print_usage
        # Print usage from above RDoc comments
        RDoc::usage('usage')
      end
  end
end

compiler = Crayon::Compiler.new(ARGV, STDIN)
compiler.run
