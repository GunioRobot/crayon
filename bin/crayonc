#!/usr/bin/env ruby

# Copyright (c) 2010-2011 Sean Voisen.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# == Synopsis
#   Compiler for the Crayon programming language.
#
# == Usage
#   crayonc myscript.crayon
#   
# == Options
#   -h, --help        Displays help message
#   -v, --version     Displays the version
#   -o, --output      Specify output file name
#   -W, --width       Specify width
#   -H, --height      Specify height
#   -r, --frame-rate  Specify desired framerate
#   -f, --format      Specify output format (html or swf)
#   -k, --keep-temp   Keep temporary files 
#   -V, --verbose     Verbose output
#
#   --with-mxmlc      Specify the location of the mxmlc compiler
#
# == Author
#   Sean Voisen
#
# == Copyright
#   Copyright (C) 2010 Sean Voisen. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

$: << File.expand_path(File.dirname(__FILE__)) + "/../lib"

require 'rubygems'
require 'optparse'
require 'ostruct'
require 'date'
require 'treetop'

require 'packager/swf_packager'
require 'packager/html_packager'
require 'generator/as3_generator'
require 'generator/js_generator'
require 'parser/crayon'

module Crayon

  class InvalidArgumentError < RuntimeError; end
  class InvalidOptionError < RuntimeError; end
  class ParserError < RuntimeError; end

  class Compiler
    VERSION = '0.1.0'

    FORMATS = %w[swf html]

    attr_reader :options

    def initialize(arguments, stdin)
      @arguments = arguments
      @stdin = stdin

      # Setup any default options
      @options = OpenStruct.new
      @options.keep_temp = false
      @options.verbose = false
      @options.format = "swf"
      @options.mxmlc = "mxmlc"
      @options.framerate = 30
      @options.width = 800
      @options.height = 600
    end

    def run
      begin
        if parsed_options? && arguments_valid?

          if @options.verbose
            puts "Compiling file #{@arguments[0]} with options:"
            puts "\tOutput format: #{@options.format}"
          end

          process_arguments
          process_command
        end
      rescue InvalidArgumentError => e
        puts e
      end
    end

    private

      # Parses options and returns true if no errors are found
      def parsed_options?
        opts = OptionParser.new

        opts.on('-v', '--version', "Print version and exit") do  
          print_version
          exit 0
        end

        opts.on('-h', '--help', "Print help and exit") do
          puts opts
          exit 0
        end

        opts.on('-o', '--output [PATH]', String, "Specify output path") do |path|
          @options.output_path = path
        end

        opts.on('-W', '--width [WIDTH]', Integer, "Specify width of output") do |width|
          @options.width = width
        end

        opts.on('-H', '--height [HEIGHT]', Integer, "Specify height of output") do |height|
          @options.height = height
        end

        opts.on('-r', '--frame-rate [RATE]', Integer, "Specify desired framerate") do |framerate|
          @options.framerate = framerate
        end

        opts.on('-f', '--format [FORMAT]', String, "Specify output format") do |format|
          raise InvalidOptionError, "Invalid format output #{format}" unless FORMATS.include? format
          @options.format = format
        end

        opts.on('-k', '--keep-temp', "Keep temporary files") do
          @options.keep_temp = true
        end

        opts.on('-V', '--verbose', "Run verbosely") do 
          @options.verbose = true
        end

        opts.on('--with-mxmlc [PATH]', String, "Specify the path to mxmlc (when compiling swf)") do |path|
          raise InvalidOptionError, "Cannot find mxmlc in path #{path}" unless File.directory? path and Dir.entries(path).include? 'mxmlc'
          @options.mxmlc = path + "/mxmlc"
        end

        begin
          opts.parse!(@arguments) 
        rescue RuntimeError => e
          $stderr.puts e
          return false
        end

        true
      end

      # Returns true if the arguments provided are valid
      def arguments_valid?
        unless @arguments.length == 1 
          raise InvalidArgumentError, "No source file specified"
        end
        
        unless File.file? @arguments[0] 
          raise InvalidArgumentError, "Cannot find source file #{@arguments[0]}"
        end

        true
      end

      # Process and set up arguments
      def process_arguments
        @source = @arguments[0]
      end

      # Process and run command
      def process_command
        program_name = File.basename(@source).split('.').first
        program_dir = File.dirname(@source)
        output_path = program_dir + '/' + program_name
        output_ext = case @options.format
                     when "swf" then ".as"
                     when "html" then ".js"
                     end

        # Read source
        code = IO.read(@source)
        
        # Compile and save to disk
        compile(output_path + output_ext, program_name, @options.format, code)
        
        # Package
        package(output_path + output_ext, output_path, program_name, @options.format, @options.width, @options.height, @options.framerate)
      end

      # Compile source provided as String in code and save to disk at output_path
      def compile(output_path, program_name, format, code)
        parser = Parser::CrayonParser.new
        generator = case format
                    when "swf" then Generator::AS3Generator.new(program_name)
                    when "html" then Generator::JSGenerator.new(program_name)
                    end

        if node = parser.parse(code)
          compiled = node.compile(generator)
        else
          raise ParserError, parser.failure_reason
        end

        # Write to disk at output_path
        File.open(output_path, 'w') {|f| f.write compiled}
      end

      # Package compiled code in specified container format
      def package(input_path, output_path, program_name, format, width, height, framerate)
        case format
        when "swf" then 
          Packager::SWFPackager.new.package(input_path, output_path, @options.mxmlc, @options.keep_temp, @options.width, @options.height, @options.framerate)
        when "html" then 
          Packager::HTMLPackager.new.package(input_path, output_path, "default", program_name, @options.width, @options.height, @options.framerate)
        end
      end

      def print_version
        puts "#{File.basename(__FILE__)} #{VERSION}"
      end

  end
end

compiler = Crayon::Compiler.new(ARGV, STDIN)
compiler.run
