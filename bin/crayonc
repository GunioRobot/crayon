#!/usr/bin/env ruby

# == Synopsis
#   Compiler for the Crayon programming language.
#
# == Usage
#   crayonc.rb myscript.crayon
#   
# == Options
#   -h, --help        Displays help message
#   -v, --version     Displays the version
#   -k, --keep-temp   Keep temporary files 
#   -V, --verbose     Verbose output
#   --with-mxmlc      Specify the location of the mxmlc compiler
#
# == Author
#   Sean Voisen
#
# == Copyright
#   Copyright (C) 2010 Sean Voisen. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

$: << File.expand_path(File.dirname(__FILE__)) + "/../lib"

require 'rubygems'
require 'optparse'
require 'rdoc/usage'
require 'ostruct'
require 'date'
require 'treetop'

require 'generator/as3_generator'
require 'parser/crayon'

module Crayon

  class InvalidArgumentError < RuntimeError; end
  class ParserError < RuntimeError; end

  class Compiler
    VERSION = '0.0.1'

    attr_reader :options

    def initialize(arguments, stdin)
      @arguments = arguments
      @stdin = stdin

      # Setup any default options
      @options = OpenStruct.new
      @options.keep_temp = false
      @options.verbose = false
    end

    def run
      begin
        if parsed_options? && arguments_valid?
          puts "Compilation started at #{DateTime.now}\n" if @options.verbose

          process_arguments
          process_command

          puts "Compilation finished at #{DateTime.now}" if @options.verbose
        end
      rescue InvalidArgumentError => e
        puts e
      end
    end

    private

      def parsed_options?
        opts = OptionParser.new

        opts.on('-v', '--version') do  
          print_version
          exit 0
        end

        opts.on('-h', '--help') do
          print_help
          exit 0
        end

        opts.on('-k', '--keep-temp') do
          @options.keep_temp = true
        end

        opts.on('-V', '--verbose') do 
          @options.verbose = true
        end

        opts.on('--with-mxmlc [PATH]') do |path|
          @options.mxmlc_path = path
        end

        opts.parse!(@arguments) rescue return false

        true
      end

      def arguments_valid?
        unless @arguments.length == 1 
          raise InvalidArgumentError, "No source file specified"
        end
        
        unless File.file? @arguments[0] 
          raise InvalidArgumentError, "Cannot find source file #{@arguments[0]}"
        end

        true
      end

      def process_arguments
        @source = @arguments[0]
      end

      def process_command
        filename = File.basename(@source).split('.').first
        dirname = File.dirname(@source)
        outname = dirname + '/' + filename 

        code = IO.read(@source)
        File.open(outname + '.as', 'w') {|f| f.write(compile(filename, code))}
        `mxmlc -library-path+=#{File.expand_path(File.dirname(__FILE__))}/../as3lib/bin #{outname}.as -o #{outname}.swf -debug=true -static-link-runtime-shared-libraries=true`

        unless @options.keep_temp
          File.delete("#{outname}.as")
        end
      end

      def compile(name, code)
        generator = Generator::AS3Generator.new(name)
        parser = Parser::CrayonParser.new

        if node = parser.parse(code)
          node.compile(generator)
        else
          raise ParserError, parser.failure_reason
        end
      end

      def print_options
        puts "Options:\n"

        @options.marshal_dump.each do |name, value|
          puts "  #{name} = #{value}"
        end
      end

      def print_help
        print_version
        RDoc::usage() # exits app
      end

      def print_version
        puts "#{File.basename(__FILE__)} #{VERSION}"
      end

      def print_usage
        # Print usage from above RDoc comments
        RDoc::usage('usage')
      end
  end
end

compiler = Crayon::Compiler.new(ARGV, STDIN)
compiler.run
